name: Deploy to Cloud Run

on:
  workflow_run:
    workflows: ["Build and Push UDX SFTP Gateway"]
    types:
      - completed

env:
  PROJECT_ID: destinationpickleball
  K8S_PROJECT_ID: rabbit-ci
  REGION: us-central1
  SERVICE_NAME: udx-sftp
  K8S_CLUSTER: rabbit-ci-cluster
  K8S_LOCATION: us-central1-a

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.K8S_CLUSTER }} \
            --zone ${{ env.K8S_LOCATION }} \
            --project ${{ env.K8S_PROJECT_ID }}
          kubectl config view --minify --flatten > k8s-config.yaml
          
      - name: Create K8s Secret
        run: |
          echo "${{ secrets.K8S_SA_KEY }}" > k8s-sa-key.json
          kubectl create secret generic k8s-sa-key \
            --from-file=key.json=k8s-sa-key.json \
            --dry-run=client -o yaml > k8s-secret.yaml

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: docker.io/usabilitydynamics/udx-sftp:v${{ steps.package_version.outputs.version }}
          flags: |
            --port=8080
            --allow-unauthenticated
            --min-instances=1
            --max-instances=10
            --cpu=1
            --memory=1Gi
            --vpc-connector=vpc-connector
            --vpc-egress=all-traffic
          secrets: |
            K8S_CONFIG=k8s-config.yaml:latest
            K8S_SA_KEY=k8s-sa-key.json:latest
          env-vars: |
            SERVICE_ENABLE_API=true
            SERVICE_ENABLE_SSHD=false
            K8S_CLUSTER=${{ env.K8S_CLUSTER }}
            K8S_PROJECT_ID=${{ env.K8S_PROJECT_ID }}
            K8S_LOCATION=${{ env.K8S_LOCATION }}
            K8S_NAMESPACE=default

      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f k8s-config.yaml k8s-sa-key.json k8s-secret.yaml

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

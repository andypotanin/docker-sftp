name: Deploy to Cloud Run

on:
  # Manual deployment only
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'

env:
  CLOUD_RUN_PROJECT_ID: destinationpickleball-com-8173
  K8S_PROJECT_ID: rabbit-cdmsqarskcacnbpe
  REGION: us-central1
  SERVICE_NAME: k8-container-gate

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Add permissions needed for auth
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set Tag
      id: version
      run: |
        echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
    
    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
        token_format: 'access_token'
        access_token_lifetime: '3600s'
        create_credentials_file: true
        export_environment_variables: true
        
    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        version: '>= 363.0.0'
        project_id: ${{ env.CLOUD_RUN_PROJECT_ID }}
        
    - name: Get K8s Credentials
      id: k8s-creds
      run: |
        # Get GKE cluster credentials from K8s project
        gcloud container clusters get-credentials \
          ${{ secrets.GKE_CLUSTER_NAME }} \
          --region=${{ env.REGION }} \
          --project=${{ env.K8S_PROJECT_ID }}
        
        # Create service account key for K8s access
        gcloud iam service-accounts keys create k8s-key.json \
          --iam-account=${{ secrets.K8S_SERVICE_ACCOUNT }} \
          --project=${{ env.K8S_PROJECT_ID }}
        
        # Store the key as a secret in Cloud Run project
        gcloud secrets create k8s-auth-key \
          --project=${{ env.CLOUD_RUN_PROJECT_ID }} \
          --data-file=k8s-key.json \
          --replication-policy=automatic || true
        
        # Get latest version
        echo "SECRET_VERSION=$(gcloud secrets versions list k8s-auth-key --project=${{ env.CLOUD_RUN_PROJECT_ID }} --format='value(name)' | sort -rn | head -n1)" >> $GITHUB_OUTPUT
    
    - name: Deploy to Cloud Run
      id: deploy
      env:
        REGISTRY: usabilitydynamics
        IMAGE_NAME: k8-container-gate
      run: |
        # Deploy service
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }} \
          --platform=managed \
          --region=${{ env.REGION }} \
          --project=${{ env.CLOUD_RUN_PROJECT_ID }} \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --timeout=300 \
          --service-account=${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }} \
          --set-env-vars="NODE_ENV=production,SERVICE_ENABLE_SSHD=true,SERVICE_ENABLE_API=true" \
          --set-env-vars="KUBERNETES_CLUSTER_NAMESPACE=${{ secrets.KUBERNETES_CLUSTER_NAMESPACE }}" \
          --set-env-vars="GCP_PROJECT_ID=${{ env.K8S_PROJECT_ID }}" \
          --set-env-vars="GKE_CLUSTER_NAME=${{ secrets.GKE_CLUSTER_NAME }}" \
          --set-env-vars="GKE_CLUSTER_REGION=${{ env.REGION }}" \
          --set-secrets="K8S_SERVICE_ACCOUNT_KEY=k8s-auth-key:${{ steps.k8s-creds.outputs.SECRET_VERSION }}" \
          --allow-unauthenticated \
          --use-http2
        
        # Get service URL
        echo "SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --project ${{ env.CLOUD_RUN_PROJECT_ID }} --format 'value(status.url)')" >> $GITHUB_OUTPUT
    
    - name: Set up TCP load balancer for SSH
      id: ssh-lb
      run: |
        # Create TCP load balancer in Cloud Run project
        gcloud compute forwarding-rules create k8gate-ssh \
          --load-balancing-scheme=EXTERNAL \
          --ports=22 \
          --target-service=${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --project=${{ env.CLOUD_RUN_PROJECT_ID }} || true
        
        # Get the load balancer IP
        echo "SSH_ENDPOINT=$(gcloud compute forwarding-rules describe k8gate-ssh --region=${{ env.REGION }} --project=${{ env.CLOUD_RUN_PROJECT_ID }} --format='get(IPAddress)')" >> $GITHUB_OUTPUT
    
    - name: Verify Deployment
      run: |
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Test HTTP endpoint
        echo "Testing HTTP endpoint..."
        curl -f "${{ steps.deploy.outputs.SERVICE_URL }}/health" || exit 1
        
        # Test SSH endpoint
        echo "Testing SSH endpoint..."
        nc -zv ${{ steps.ssh-lb.outputs.SSH_ENDPOINT }} 22 || exit 1
        
        # Print connection information
        echo "=== Deployment Information ==="
        echo "HTTP Endpoint: ${{ steps.deploy.outputs.SERVICE_URL }}"
        echo "SSH Endpoint: ${{ steps.ssh-lb.outputs.SSH_ENDPOINT }}"
        echo "To connect: ssh <github-username>@${{ steps.ssh-lb.outputs.SSH_ENDPOINT }}"

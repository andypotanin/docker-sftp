name: Build and Test

on:
  pull_request:
    branches: [ master, latest ]
  push:
    branches: [ master, latest ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm install --save-dev jest eslint eslint-plugin-node
    
    - name: Run linting
      run: npm run lint
    
    - name: Build test image
      run: |
        docker build \
          --tag usabilitydynamics/k8-container-gate:test \
          --build-arg NODE_ENV=test \
          -f Dockerfile.udx .
    
    - name: Set up test environment
      run: |
        # Create test directories with proper permissions
        sudo mkdir -p /home/runner/.ssh
        sudo mkdir -p /home/runner/authorized_keys.d
        sudo chmod 700 /home/runner/.ssh
        sudo chmod 755 /home/runner/authorized_keys.d
        
        # Generate SSH key pair
        sudo ssh-keygen -t rsa -b 4096 -f /home/runner/.ssh/id_rsa -N ""
        sudo chmod 600 /home/runner/.ssh/id_rsa
        sudo chown -R runner:runner /home/runner/.ssh
        
        # Set up authorized_keys for container
        sudo cp /home/runner/.ssh/id_rsa.pub /home/runner/authorized_keys.d/test-user
        sudo chmod 644 /home/runner/authorized_keys.d/test-user
        sudo chown -R runner:runner /home/runner/authorized_keys.d
        
        # Debug SSH setup
        echo "=== Host SSH Setup ==="
        ls -la /home/runner/.ssh/
        ls -la /home/runner/authorized_keys.d/
        cat /home/runner/authorized_keys.d/test-user
        echo "======================"
    
    - name: Run unit tests
      run: npm test
    
    - name: Run integration tests
      run: |
        # Start test container with proper permissions
        docker run -d --name test-container \
          -e NODE_ENV=test \
          -e TEST_MODE=true \
          -e TEST_SSH_USER=test-user \
          -e DEBUG=ssh:* \
          -v /home/runner/authorized_keys.d:/etc/ssh/authorized_keys.d:ro \
          -v /home/runner/.ssh/id_rsa.pub:/etc/ssh/authorized_keys.d/test-user:ro \
          -p 2222:22 \
          usabilitydynamics/k8-container-gate:test
        
        # Wait for container to start and set up SSH
        sleep 10
        
        # Set correct permissions in container
        docker exec test-container sh -c "
          mkdir -p /etc/ssh/authorized_keys.d && \
          chmod 755 /etc/ssh/authorized_keys.d && \
          chmod 644 /etc/ssh/authorized_keys.d/test-user && \
          chown -R root:root /etc/ssh/authorized_keys.d && \
          chmod 600 /etc/ssh/ssh_host_rsa_key && \
          chmod 644 /etc/ssh/ssh_host_rsa_key.pub && \
          ls -la /etc/ssh/ && \
          ls -la /etc/ssh/authorized_keys.d/
        "
        
        # Wait for container and SSH to be ready
        sleep 30
        docker logs test-container
        
        # Debug container SSH setup
        echo "=== Container SSH Setup ==="
        docker exec test-container ls -la /etc/ssh/
        docker exec test-container ls -la /etc/ssh/authorized_keys.d/
        docker exec test-container cat /etc/ssh/authorized_keys.d/test-user
        docker exec test-container ps aux | grep sshd
        docker exec test-container cat /var/log/sshd.log || true
        docker exec test-container cat /etc/ssh/sshd_config || true
        echo "=========================="
        
        # Test SSH connection with verbose output
        ssh -v -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no test-user@localhost -p 2222 "echo SSH Connection Test"
        
        # Run tests with verbose SSH debugging
        TEST_SSH_HOST=localhost \
        TEST_SSH_PORT=2222 \
        TEST_SSH_USER=test-user \
        TEST_SSH_KEY_PATH=~/.ssh/id_rsa \
        DEBUG=ssh:* \
        SSH_VERBOSE=1 \
        npm run test:integration
    
    - name: Cleanup
      if: always()
      run: |
        docker rm -f test-container || true
        rm -f authorized_keys

name: Local Kubernetes Tests

on:
  pull_request:
    branches: [ master, latest ]
  push:
    branches: [ master, latest ]

jobs:
  test-k8s-local:
    name: Test with Local K8s
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    - name: Create KinD config
      run: |
        cat > /tmp/kind-config.yaml << 'EOF'
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          extraPortMappings:
          - containerPort: 22
            hostPort: 2222
            protocol: TCP
        EOF
        cat /tmp/kind-config.yaml
        
    - name: Set up KinD cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: test-cluster
        config: /tmp/kind-config.yaml
        wait: 120s
    
    - name: Build test image
      run: |
        docker build \
          --tag usabilitydynamics/k8-container-gate:test \
          --build-arg NODE_ENV=test \
          -f Dockerfile.udx .
        
        # Wait for cluster to be ready
        kubectl wait --for=condition=Ready nodes --all --timeout=300s
        
        # Load image into KinD
        kind load docker-image --name test-cluster usabilitydynamics/k8-container-gate:test
    
    - name: Deploy to local cluster
      run: |
        # Create test namespace
        kubectl create namespace test-k8gate
        
        # Set up SSH directories and keys
        mkdir -p /home/runner/.ssh
        mkdir -p /home/runner/authorized_keys.d
        chmod 700 /home/runner/.ssh
        chmod 755 /home/runner/authorized_keys.d
        
        # Generate SSH keys
        ssh-keygen -t rsa -b 4096 -f /home/runner/.ssh/id_rsa -N ""  # Client key
        ssh-keygen -t rsa -b 4096 -f /tmp/ssh_host_rsa_key -N ""     # Host key
        chmod 600 /home/runner/.ssh/id_rsa
        chmod 600 /tmp/ssh_host_rsa_key
        
        # Set up authorized keys
        cp /home/runner/.ssh/id_rsa.pub /home/runner/authorized_keys.d/test-user
        chmod 644 /home/runner/authorized_keys.d/test-user
        
        # Create Kubernetes secret for SSH keys
        kubectl -n test-k8gate create secret generic ssh-keys \
          --from-file=ssh_host_rsa_key=/tmp/ssh_host_rsa_key \
          --from-file=ssh_host_rsa_key.pub=/tmp/ssh_host_rsa_key.pub \
          --from-file=authorized_keys=/home/runner/authorized_keys.d/test-user
        
        # Debug SSH setup
        echo "=== SSH Setup ==="
        ls -la /home/runner/.ssh/
        ls -la /home/runner/authorized_keys.d/
        ls -la /tmp/ssh_host_rsa_key*
        echo "================="
        
        # Deploy test instance
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: k8gate-test-secrets
          namespace: test-k8gate
        type: Opaque
        stringData:
          ACCESS_TOKEN: "test-token"
          KUBERNETES_CLUSTER_USER_TOKEN: "test-token"
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: k8gate-test
          namespace: test-k8gate
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: k8gate-test
          template:
            metadata:
              labels:
                app: k8gate-test
                ci.rabbit.ssh.user: test-user
                git.name: docker-sftp
                git.owner: andypotanin
                name: k8gate-test
            spec:
              containers:
              - name: k8gate
                image: usabilitydynamics/k8-container-gate:test
                env:
                - name: NODE_ENV
                  value: test
                - name: TEST_MODE
                  value: "true"
                - name: TEST_SSH_USER
                  value: test-user
                - name: DEBUG
                  value: "ssh:*"
                volumeMounts:
                - name: ssh-host-keys
                  mountPath: "/etc/ssh"
                - name: ssh-keys
                  mountPath: "/etc/ssh/authorized_keys.d"
                  readOnly: true
                ports:
                - containerPort: 22
              volumes:
              - name: ssh-host-keys
                secret:
                  secretName: ssh-keys
                  items:
                  - key: ssh_host_rsa_key
                    path: ssh_host_rsa_key
                    mode: 0600
                  - key: ssh_host_rsa_key.pub
                    path: ssh_host_rsa_key.pub
                    mode: 0644
              - name: ssh-keys
                secret:
                  secretName: ssh-keys
                  items:
                  - key: authorized_keys
                    path: test-user
                    mode: 0644
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: k8gate-test
          namespace: test-k8gate
        spec:
          type: NodePort
          ports:
          - port: 22
            targetPort: 22
            nodePort: 32222
          selector:
            app: k8gate-test
        EOF
        
        # Wait for deployment
        kubectl -n test-k8gate rollout status deployment/k8gate-test --timeout=300s
        
        # Wait for pod to be ready
        kubectl wait --for=condition=ready pod -l app=k8gate-test -n test-k8gate --timeout=300s
    
    - name: Run tests
      run: |
        # Set up SSH key for tests
        mkdir -p ~/.ssh
        echo "${{ secrets.TEST_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Wait for service to be ready
        kubectl -n test-k8gate get service k8gate-test
        
        # Run integration tests using NodePort
        TEST_SSH_HOST=localhost \
        TEST_SSH_PORT=32222 \
        TEST_SSH_USER=test-user \
        TEST_SSH_KEY_PATH=~/.ssh/id_rsa \
        npm run test:integration
    
    - name: Cleanup
      if: always()
      run: |
        kubectl delete namespace test-k8gate
        kind delete cluster

name: Build and Test Container

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linting
      run: npm run lint
    
    - name: Set Tag from package.json
      id: version
      run: echo "TAG=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Pull base image
      run: docker pull usabilitydynamics/udx-worker-nodejs:latest
    
    - name: Build Docker image
      env:
        REGISTRY: test
        IMAGE_NAME: k8-container-gate
      run: |
        # Build Docker image with version tag
        docker build \
          --tag ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }} \
          --tag ${REGISTRY}/${IMAGE_NAME}:latest \
          --build-arg NODE_ENV=test \
          --build-arg SERVICE_ENABLE_SSHD=true \
          --build-arg SERVICE_ENABLE_API=true \
          --build-arg WORKER_DEBUG=true \
          -f Dockerfile.udx .
    
    - name: Test container startup and services
      env:
        REGISTRY: test
        IMAGE_NAME: k8-container-gate
        ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KUBERNETES_CLUSTER_ENDPOINT: https://test-cluster:6443
        KUBERNETES_CLUSTER_NAME: test-cluster
        KUBERNETES_CLUSTER_NAMESPACE: test-namespace
        KUBERNETES_CLUSTER_USER_TOKEN: test-user-token
        KUBERNETES_CLUSTER_SERVICEACCOUNT: test-serviceaccount
        KUBERNETES_CLUSTER_CERTIFICATE: test-cert
        KUBERNETES_CLUSTER_USER_SECRET: test-secret
        KUBERNETES_CLUSTER_CONTEXT: test-context
        ALLOW_SSH_ACCESS_ROLES: admin,maintain,write
      run: |
        # Create test SSH key and directories
        sudo mkdir -p /etc/ssh/authorized_keys.d
        sudo chmod 755 /etc/ssh/authorized_keys.d
        ssh-keygen -t rsa -f /tmp/test_key -N ""
        sudo cp /tmp/test_key.pub /etc/ssh/authorized_keys.d/test-user
        sudo chmod 644 /etc/ssh/authorized_keys.d/test-user
        
        # Prepare worker configuration directory
        mkdir -p /tmp/worker/configs
        cp src/configs/services.yml /tmp/worker/services.yml
        cp src/configs/services.yml /tmp/worker/configs/services.yml
        chmod -R 755 /tmp/worker
        
        # Start container with test configuration
        docker run -d --name test-container \
          --privileged \
          -e NODE_ENV=test \
          -e SERVICE_ENABLE_SSHD=true \
          -e SERVICE_ENABLE_API=true \
          -e DEBUG=k8gate:*,api:*,auth:*,ssh:*,worker:* \
          -e SERVICE_ENABLE_K8S=false \
          -e ACCESS_TOKEN=${ACCESS_TOKEN} \
          -e KUBERNETES_CLUSTER_ENDPOINT=${KUBERNETES_CLUSTER_ENDPOINT} \
          -e KUBERNETES_CLUSTER_NAME=${KUBERNETES_CLUSTER_NAME} \
          -e KUBERNETES_CLUSTER_NAMESPACE=${KUBERNETES_CLUSTER_NAMESPACE} \
          -e KUBERNETES_CLUSTER_USER_TOKEN=${KUBERNETES_CLUSTER_USER_TOKEN} \
          -e KUBERNETES_CLUSTER_SERVICEACCOUNT=${KUBERNETES_CLUSTER_SERVICEACCOUNT} \
          -e KUBERNETES_CLUSTER_CERTIFICATE=${KUBERNETES_CLUSTER_CERTIFICATE} \
          -e KUBERNETES_CLUSTER_USER_SECRET=${KUBERNETES_CLUSTER_USER_SECRET} \
          -e KUBERNETES_CLUSTER_CONTEXT=${KUBERNETES_CLUSTER_CONTEXT} \
          -e ALLOW_SSH_ACCESS_ROLES=${ALLOW_SSH_ACCESS_ROLES} \
          -e DIRECTORY_KEYS_BASE=/etc/ssh/authorized_keys.d \
          -e PASSWORD_FILE=/etc/passwd \
          -e PASSWORDS_TEMPLATE=alpine.passwords \
          -e STATE_PROVIDER=local \
          -e WORKER_DEBUG=true \
          -e WORKER_CONFIG_DIR=/etc/worker \
          -v /etc/ssh/authorized_keys.d:/etc/ssh/authorized_keys.d:ro \
          -v /tmp/worker:/etc/worker:ro \
          -p 2222:22 \
          -p 8080:8080 \
          ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }}
        
        # Wait for container to start and show logs
        sleep 5
        docker logs test-container
        
        # Test SSH daemon
        docker exec test-container pgrep sshd || exit 1
        
        # Test API server
        curl -f http://localhost:8080/health || exit 1
        
        # Test SSH key setup
        docker exec test-container test -f /etc/ssh/authorized_keys.d/test-user || exit 1
        docker exec test-container test -f /etc/passwd || exit 1
        
        # Test SSH configuration
        docker exec test-container sh -c '
          # Check sshd config
          sshd -t || exit 1
          
          # Verify SSH directory permissions
          test -d /etc/ssh/authorized_keys.d || exit 1
          test "$(stat -c %a /etc/ssh/authorized_keys.d)" = "755" || exit 1
          
          # Verify key file permissions
          test -f /etc/ssh/authorized_keys.d/test-user || exit 1
          test "$(stat -c %a /etc/ssh/authorized_keys.d/test-user)" = "644" || exit 1
        ' || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

    - name: Push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        REGISTRY: ${{ secrets.DOCKER_HUB_USERNAME }}
        IMAGE_NAME: k8-container-gate
      run: |
        docker push ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }}
        docker push ${REGISTRY}/${IMAGE_NAME}:latest

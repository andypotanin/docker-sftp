name: Build and Test Container

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linting
      run: npm run lint
    
    - name: Set Tag from package.json
      id: version
      run: echo "TAG=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Build Docker image
      env:
        REGISTRY: ${{ secrets.DOCKER_HUB_USERNAME }}
        IMAGE_NAME: k8-container-gate
      run: |
        # Use node:20-slim as base
        docker build \
          --tag ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }} \
          --tag ${REGISTRY}/${IMAGE_NAME}:latest \
          --build-arg NODE_ENV=test \
          -f Dockerfile.udx .
    
    - name: Test container startup and services
      env:
        REGISTRY: ${{ secrets.DOCKER_HUB_USERNAME }}
        IMAGE_NAME: k8-container-gate
        ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KUBERNETES_CLUSTER_ENDPOINT: https://test-cluster:6443
        KUBERNETES_CLUSTER_NAME: test-cluster
        KUBERNETES_CLUSTER_NAMESPACE: test-namespace
        KUBERNETES_CLUSTER_USER_TOKEN: test-user-token
        KUBERNETES_CLUSTER_SERVICEACCOUNT: test-serviceaccount
        KUBERNETES_CLUSTER_CERTIFICATE: test-cert
        KUBERNETES_CLUSTER_USER_SECRET: test-secret
        KUBERNETES_CLUSTER_CONTEXT: test-context
        ALLOW_SSH_ACCESS_ROLES: admin,maintain,write
      run: |
        # Create test SSH key
        ssh-keygen -t rsa -f /tmp/test_key -N ""
        
        # Start container with test configuration
        docker run -d --name test-container \
          -e NODE_ENV=test \
          -e SERVICE_ENABLE_SSHD=true \
          -e SERVICE_ENABLE_API=true \
          -e DEBUG=k8gate:*,api:*,auth:*,ssh:* \
          -e SERVICE_ENABLE_K8S=false \
          -e SERVICE_ENABLE_FIREBASE=false \
          -e ACCESS_TOKEN=${ACCESS_TOKEN} \
          -e KUBERNETES_CLUSTER_ENDPOINT=${KUBERNETES_CLUSTER_ENDPOINT} \
          -e KUBERNETES_CLUSTER_NAME=${KUBERNETES_CLUSTER_NAME} \
          -e KUBERNETES_CLUSTER_NAMESPACE=${KUBERNETES_CLUSTER_NAMESPACE} \
          -e KUBERNETES_CLUSTER_USER_TOKEN=${KUBERNETES_CLUSTER_USER_TOKEN} \
          -e KUBERNETES_CLUSTER_SERVICEACCOUNT=${KUBERNETES_CLUSTER_SERVICEACCOUNT} \
          -e KUBERNETES_CLUSTER_CERTIFICATE=${KUBERNETES_CLUSTER_CERTIFICATE} \
          -e KUBERNETES_CLUSTER_USER_SECRET=${KUBERNETES_CLUSTER_USER_SECRET} \
          -e KUBERNETES_CLUSTER_CONTEXT=${KUBERNETES_CLUSTER_CONTEXT} \
          -e ALLOW_SSH_ACCESS_ROLES=${ALLOW_SSH_ACCESS_ROLES} \
          -p 2222:22 \
          -p 8080:8080 \
          ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }}
        
        # Wait for container to start
        sleep 10
        
        # Check container logs for startup
        docker logs test-container
        
        # Test SSH daemon
        docker exec test-container pgrep sshd || exit 1
        
        # Test API server
        curl -f http://localhost:8080/health || exit 1
        
        # Cleanup
        docker rm -f test-container
    
    - name: Push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        REGISTRY: ${{ secrets.DOCKER_HUB_USERNAME }}
        IMAGE_NAME: k8-container-gate
      run: |
        docker push ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }}
        docker push ${REGISTRY}/${IMAGE_NAME}:latest

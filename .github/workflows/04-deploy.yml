name: Deploy

on:
  workflow_run:
    workflows: ["Security Scan"]
    types:
      - completed
    branches: [ master ]
  push:
    tags: [ 'v*' ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    if: (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Set Tag from package.json
      id: version
      run: echo "TAG=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Download artifacts
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: Build and Lint
        workflow_conclusion: success
        name: docker-image
        path: /tmp
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Load Docker image
      run: docker load --input /tmp/docker-image.tar
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    
    - name: Push to Docker Hub
      run: |
        # Set environment variables
        REGISTRY="${{ secrets.DOCKER_REGISTRY }}"
        IMAGE_NAME="${{ secrets.IMAGE_NAME }}"
        
        # Tag and push with version from package.json
        docker push ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }}
        docker tag ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }} ${REGISTRY}/${IMAGE_NAME}:latest
        docker push ${REGISTRY}/${IMAGE_NAME}:latest
        
        # If this is a tag, also push the git tag version
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          docker tag ${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }} ${REGISTRY}/${IMAGE_NAME}:${VERSION}
          docker push ${REGISTRY}/${IMAGE_NAME}:${VERSION}
        fi

    - name: Deploy to Cloud Run
      run: |
        # Use same registry and image name variables
        REGISTRY="${{ secrets.DOCKER_REGISTRY }}"
        IMAGE_NAME="${{ secrets.IMAGE_NAME }}"
        
        gcloud run deploy ${IMAGE_NAME} \
          --image=${REGISTRY}/${IMAGE_NAME}:${{ steps.version.outputs.TAG }} \
          --platform=managed \
          --region=us-central1 \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --timeout=300 \
          --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
          --set-env-vars="NODE_ENV=production,SERVICE_ENABLE_SSHD=true,SERVICE_ENABLE_API=true" \
          --set-env-vars="KUBERNETES_CLUSTER_ENDPOINT=${{ secrets.KUBERNETES_CLUSTER_ENDPOINT }},KUBERNETES_CLUSTER_NAMESPACE=${{ secrets.KUBERNETES_CLUSTER_NAMESPACE }}" \
          --set-secrets="KUBERNETES_CLUSTER_USER_TOKEN=${{ secrets.K8S_TOKEN_SECRET_NAME }},ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN_SECRET_NAME }}" \
          --allow-unauthenticated \
          --use-http2

    - name: Set up TCP load balancer for SSH
      run: |
        # Use same variables for load balancer
        LB_NAME="${{ secrets.LOAD_BALANCER_NAME }}"
        REGION="${{ secrets.GCP_REGION }}"
        
        gcloud compute forwarding-rules create ${LB_NAME} \
          --load-balancing-scheme=EXTERNAL \
          --ports=22 \
          --target-service=${IMAGE_NAME} \
          --region=${REGION} || true  # Don't fail if already exists
        
        # Get the load balancer IP
        echo "SSH_ENDPOINT=$(gcloud compute forwarding-rules describe ${LB_NAME} --region=${REGION} --format='get(IPAddress)')" >> $GITHUB_OUTPUT

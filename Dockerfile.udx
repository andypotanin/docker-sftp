# Docker SFTP Gateway
# This Dockerfile builds a container that provides SFTP access to Kubernetes pods
#
# Key Components:
# - Base Image: node:20-slim for minimal Node.js runtime
# - OpenSSH server for SFTP/SSH access
# - Kubernetes tools (kubectl) for pod access
# - Google Cloud SDK for GKE support
#
# The container uses two entrypoint scripts:
# 1. entrypoint.sh: Initializes services and SSH keys (ENTRYPOINT)
# 2. controller.ssh.entrypoint.sh: Handles SSH connections (CMD)
#
# Environment Variables:
# - NODE_ENV: Production/development mode
# - SERVICE_ENABLE_SSHD: Enable SSH daemon
# - SERVICE_ENABLE_API: Enable API server
# - SERVICE_ENABLE_FIREBASE: Enable Firebase integration
# - USE_GKE_GCLOUD_AUTH_PLUGIN: Enable GKE auth plugin
# - PORT/NODE_PORT: Service ports

FROM node:20-slim

# Create udx user and group
RUN groupadd -r udx && useradd -r -g udx -m udx

# Set build arguments and environment variables
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV} \
    SERVICE_ENABLE_SSHD=true \
    SERVICE_ENABLE_API=true \
    SERVICE_ENABLE_FIREBASE=false \
    USE_GKE_GCLOUD_AUTH_PLUGIN=true \
    PORT=8080 \
    NODE_PORT=8080

# Switch to root for package installations
USER root

# Install OpenSSH server and other dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssh-server \
    openssh-sftp-server \
    curl \
    netcat-traditional \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set up directories and permissions
WORKDIR /opt/sources/k8gate/server

RUN mkdir -p /home/udx/.kube \
    /root/.ssh \
    /etc/ssh \
    /etc/ssh/authorized_keys.d \
    /home/udx/.cd/configs \
    /etc/worker \
    /var/log \
    && rm -rf /etc/ssh/* \
    && mkdir -p /etc/ssh/authorized_keys.d \
    && chmod 755 /etc/ssh/authorized_keys.d \
    && chown -R udx:udx /home/udx \
    && chown -R udx:udx /opt/sources/k8gate

# Copy SSH configuration
COPY --chown=udx:udx static/etc/ssh/ /etc/ssh/

# Copy worker configurations
COPY --chown=udx:udx src/configs/worker.yml /home/udx/.cd/configs/worker.yml
COPY --chown=udx:udx src/configs/services.yml /etc/worker/services.yml

# Create necessary directories and set permissions
RUN mkdir -p /etc/ssh/authorized_keys.d && \
    mkdir -p /var/log && \
    touch /var/log/k8gate.log /var/log/k8gate-events.log /var/log/auth.log && \
    chmod 644 /var/log/k8gate.log /var/log/k8gate-events.log /var/log/auth.log && \
    chmod 755 /etc/ssh && \
    chmod 755 /etc/ssh/authorized_keys.d

# Set up logging and permissions
RUN touch /var/log/k8gate.log /var/log/k8gate-events.log /var/log/auth.log \
    && chown udx:udx /var/log/k8gate.log \
    && chown udx:udx /var/log/k8gate-events.log \
    && chown udx:udx /var/log/auth.log

# Install kubectl
RUN curl -L https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl \
    && chmod +x /usr/local/bin/kubectl

# Install Google Cloud SDK in /usr/local
RUN curl -sSL https://sdk.cloud.google.com | bash -s -- --install-dir=/usr/local --disable-prompts \
    && /usr/local/google-cloud-sdk/bin/gcloud components install gke-gcloud-auth-plugin \
    && chown -R udx:udx /usr/local/google-cloud-sdk

# Copy application files
COPY --chown=udx:udx . .

# Copy and set permissions for scripts
COPY bin/entrypoint.sh /usr/local/bin/
COPY bin/controller.ssh.entrypoint.sh /usr/local/bin/
COPY bin/setup.js /opt/app/bin/
RUN chmod +x /usr/local/bin/entrypoint.sh && \
    chmod +x /usr/local/bin/controller.ssh.entrypoint.sh && \
    chmod +x /opt/app/bin/setup.js

# Set permissions for executables and npm
RUN mkdir -p /usr/local/lib/node_modules \
    && mkdir -p /home/udx/.npm \
    && chown -R udx:udx /home/udx/.npm \
    && chmod -R 775 /home/udx/.npm \
    && chown -R udx:udx /opt/sources/k8gate/server/bin \
    && chmod -R 755 /opt/sources/k8gate/server/bin

# Switch back to non-root user
USER udx

# Add Google Cloud SDK to PATH
ENV PATH $PATH:/usr/local/google-cloud-sdk/bin

# Install dependencies
RUN npm ci --only=production

# Volume for SSH keys and logs
VOLUME [ "/etc/ssh/authorized_keys.d", "/var/log" ]

# Expose ports
EXPOSE 22 8080

# Set entrypoint to main entrypoint which will start services
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Set default command to start SSH controller
CMD ["/usr/local/bin/controller.ssh.entrypoint.sh"]

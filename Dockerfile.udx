# Docker SFTP Gateway
# This Dockerfile builds a container that provides SFTP access to Kubernetes pods
#
# Key Components:
# - Base Image: usabilitydynamics/udx-worker-nodejs for Node.js support
# - OpenSSH server for SFTP/SSH access
# - Kubernetes tools (kubectl) for pod access
# - Google Cloud SDK for GKE support
#
# The container uses two entrypoint scripts:
# 1. entrypoint.sh: Initializes services and SSH keys (ENTRYPOINT)
# 2. controller.ssh.entrypoint.sh: Handles SSH connections (CMD)
#
# Environment Variables:
# - NODE_ENV: Production/development mode
# - SERVICE_ENABLE_SSHD: Enable SSH daemon
# - SERVICE_ENABLE_API: Enable API server
# - SERVICE_ENABLE_FIREBASE: Enable Firebase integration
# - USE_GKE_GCLOUD_AUTH_PLUGIN: Enable GKE auth plugin
# - PORT/NODE_PORT: Service ports

FROM usabilitydynamics/udx-worker-nodejs:latest

# Set environment variables
ENV NODE_ENV=production \
    SERVICE_ENABLE_SSHD=true \
    SERVICE_ENABLE_API=true \
    SERVICE_ENABLE_FIREBASE=false \
    USE_GKE_GCLOUD_AUTH_PLUGIN=true \
    PORT=8080 \
    NODE_PORT=8080 \
    DEBUG=ssh*,sftp*,k8gate*

# Switch to root for package installations
USER root

# Install and configure supervisord
RUN apt-get update && apt-get install -y --no-install-recommends \
    supervisor \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /etc/supervisor/conf.d /var/log/supervisor

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssh-server \
    openssh-sftp-server \
    netcat-traditional \
    ca-certificates \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify supervisord configuration and setup directories
RUN echo "Testing supervisord configuration..." \
    && mkdir -p /var/run /var/log/supervisor \
    && chmod 755 /var/run /var/log/supervisor \
    && touch /var/run/supervisor.sock \
    && chmod 700 /var/run/supervisor.sock \
    && chown -R root:root /etc/supervisor \
    && supervisord -c /etc/supervisor/supervisord.conf -t \
    && echo "Supervisord configuration test passed" \
    && rm -f /var/run/supervisor.sock

# Set up directories and permissions
WORKDIR /opt/sources/rabbitci/rabbit-ssh

# Create required directories with correct ownership
RUN mkdir -p \
    /home/udx/.kube \
    /root/.ssh \
    /etc/ssh \
    /var/log \
    /usr/local/lib/node_modules \
    /home/udx/.npm \
    /usr/local/bin && \
    ln -s /usr/bin/node /usr/local/bin/node && \
    chown -R udx:udx /home/udx

# Set up SSH configuration
COPY --chown=root:root static/etc/ssh/ /etc/ssh/
RUN chmod 755 /etc/ssh && \
    chmod 644 /etc/ssh/sshd_config && \
    mkdir -p /etc/ssh/authorized_keys.d /run/sshd && \
    chmod 755 /etc/ssh/authorized_keys.d && \
    chmod 755 /run/sshd && \
    chown -R root:root /etc/ssh && \
    chown -R udx:udx /home/udx && \
    chown -R udx:udx /opt/sources/rabbitci && \
    chown -R udx:udx /var/log && \
    chmod 777 /etc/ssh/authorized_keys.d
# Configure supervisord and services
RUN mkdir -p /etc/supervisor/conf.d /var/log/supervisor /var/run /etc/worker && \
    chmod 755 /var/log/supervisor /var/run /etc/worker && \
    touch /var/run/supervisor.sock && \
    chmod 700 /var/run/supervisor.sock && \
    chown -R root:root /etc/supervisor

# Copy supervisord configuration
COPY --chown=root:root static/etc/supervisor/supervisord.conf /etc/supervisor/supervisord.conf
COPY --chown=root:root static/etc/supervisor/services.conf /etc/supervisor/conf.d/services.conf

# Copy services configuration
COPY --chown=root:root .github/workflows/services.yml /etc/worker/services.yml

# Set correct permissions and verify files
RUN chmod 644 /etc/supervisor/supervisord.conf /etc/supervisor/conf.d/services.conf /etc/worker/services.yml && \
    chown root:root /etc/supervisor/supervisord.conf /etc/supervisor/conf.d/services.conf /etc/worker/services.yml && \
    echo "Verifying configuration files:" && \
    ls -la /etc/supervisor/supervisord.conf /etc/supervisor/conf.d/services.conf /etc/worker/services.yml && \
    echo "Services.yml content:" && \
    cat /etc/worker/services.yml && \
    echo "Supervisord config:" && \
    cat /etc/supervisor/supervisord.conf && \
    echo "Services config:" && \
    cat /etc/supervisor/conf.d/services.conf

# Set up services configuration and convert to supervisord format
RUN npm install -g js-yaml && \
    chmod 644 /etc/worker/services.yml && \
    mkdir -p /usr/local/bin && \
    echo "Setting up Node.js environment..." && \
    node --version && \
    npm --version && \
    echo "Installed packages:" && \
    npm list -g

# Install convert-services script and configure services
COPY --chown=root:root bin/convert-services.js /usr/local/bin/
RUN chmod +x /usr/local/bin/convert-services.js && \
    mkdir -p /etc/worker /etc/supervisor/conf.d && \
    chown root:root /etc/worker && \
    chmod 755 /etc/worker && \
    chown -R root:root /etc/supervisor && \
    chmod 644 /etc/supervisor/supervisord.conf

# Fix SSH config and logging permissions
RUN chmod 644 /etc/ssh/sshd_config && \
    touch /var/log/sshd.log /var/log/auth.log /var/log/k8gate.log && \
    chmod 644 /var/log/*.log && \
    chown udx:udx /var/log/*.log && \
    chmod 755 /etc/ssh /etc/ssh/authorized_keys.d

# Install kubectl
RUN curl -L https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl \
    && chmod +x /usr/local/bin/kubectl

# Install Google Cloud SDK in /usr/local
RUN curl -sSL https://sdk.cloud.google.com | bash -s -- --install-dir=/usr/local --disable-prompts \
    && /usr/local/google-cloud-sdk/bin/gcloud components install gke-gcloud-auth-plugin \
    && chown -R udx:udx /usr/local/google-cloud-sdk
ENV PATH $PATH:/usr/local/google-cloud-sdk/bin

# Copy application files
COPY --chown=udx:udx . /opt/sources/rabbitci/rabbit-ssh/

# Set up log files and permissions
RUN set -ex \
    && echo "Setting up log files..." \
    && mkdir -p /var/log/supervisor \
    && touch /var/log/{sshd,k8gate,ssh-keys-sync,auth}.log \
    && chown -R udx:udx /var/log/{sshd.log,k8gate.log,ssh-keys-sync.log,auth.log} \
    && chmod 644 /var/log/{sshd,k8gate,ssh-keys-sync,auth}.log \
    && echo "Log files setup completed successfully"

# Verify configuration files and permissions
RUN echo "Verifying configuration files and permissions..." && \
    test -f /etc/supervisor/supervisord.conf && \
    test -f /etc/supervisor/conf.d/services.conf && \
    test -d /var/log/supervisor && \
    test -d /var/run && \
    chmod 755 /var/run /var/log/supervisor && \
    chmod 644 /etc/supervisor/supervisord.conf && \
    chmod 644 /etc/supervisor/conf.d/services.conf && \
    echo "Configuration files and permissions verified successfully"

# Set up entrypoint scripts and permissions
COPY --chown=root:root bin/entrypoint.sh /usr/local/bin/
COPY --chown=root:root bin/controller.ssh.entrypoint.sh /usr/local/bin/
RUN chmod 755 /usr/local/bin/entrypoint.sh && \
    chmod 755 /usr/local/bin/controller.ssh.entrypoint.sh && \
    chmod +x /opt/sources/rabbitci/rabbit-ssh/bin/controller.keys.js && \
    chmod +x /opt/sources/rabbitci/rabbit-ssh/bin/server.js && \
    chmod -R 755 /opt/sources/rabbitci/rabbit-ssh/bin && \
    mkdir -p /usr/local/lib/node_modules && \
    chown -R udx:udx /home/udx/.npm && \
    chmod -R 775 /home/udx/.npm

# Add Google Cloud SDK to PATH
ENV PATH $PATH:/usr/local/google-cloud-sdk/bin

# Install dependencies with correct permissions
USER root
RUN mkdir -p /home/udx/.npm && \
    chown -R udx:udx /home/udx/.npm && \
    chmod -R 755 /home/udx && \
    npm config set cache /home/udx/.npm/_cacache && \
    cd /opt/sources/rabbitci/rabbit-ssh && \
    runuser -u udx -- npm install --omit=dev && \
    chown -R udx:udx /opt/sources/rabbitci/rabbit-ssh/node_modules

# Set environment variables for API server
ENV HOME=/home/udx \
    USER=udx \
    DEBUG=ssh*,sftp*,k8gate* \
    NODE_ENV=production \
    NODE_PORT=8080 \
    SERVICE_ENABLE_SSHD=true \
    SERVICE_ENABLE_API=true

# Volume for SSH keys and logs
VOLUME ["/etc/ssh/authorized_keys.d", "/var/log"]

# Expose ports
EXPOSE 22 8080

# Set entrypoint and default command
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/sbin/sshd", "-D", "-e"]

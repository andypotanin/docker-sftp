# Docker SFTP Gateway
# This Dockerfile builds a container that provides SFTP access to Kubernetes pods
#
# Key Components:
# - Base Image: usabilitydynamics/udx-worker-nodejs for Node.js support
# - OpenSSH server for SFTP/SSH access
# - Kubernetes tools (kubectl) for pod access
# - Google Cloud SDK for GKE support
#
# The container uses two entrypoint scripts:
# 1. entrypoint.sh: Initializes services and SSH keys (ENTRYPOINT)
# 2. controller.ssh.entrypoint.sh: Handles SSH connections (CMD)
#
# Environment Variables:
# - NODE_ENV: Production/development mode
# - SERVICE_ENABLE_SSHD: Enable SSH daemon
# - SERVICE_ENABLE_API: Enable API server
# - SERVICE_ENABLE_FIREBASE: Enable Firebase integration
# - USE_GKE_GCLOUD_AUTH_PLUGIN: Enable GKE auth plugin
# - PORT/NODE_PORT: Service ports

FROM usabilitydynamics/udx-worker-nodejs:latest

# Set environment variables
ENV NODE_ENV=production \
    SERVICE_ENABLE_SSHD=true \
    SERVICE_ENABLE_API=true \
    SERVICE_ENABLE_FIREBASE=false \
    USE_GKE_GCLOUD_AUTH_PLUGIN=true \
    PORT=8080 \
    NODE_PORT=8080 \
    DEBUG=ssh*,sftp*,k8gate*

# Switch to root for package installations
USER root

# Install and verify worker binary
RUN set -ex \
    && echo "Installing worker binary..." \
    && curl -L https://github.com/usabilitydynamics/worker/releases/download/v0.8.0/worker-linux-x64 -o /usr/local/bin/worker \
    && chmod +x /usr/local/bin/worker \
    && chown root:root /usr/local/bin/worker \
    && echo "Creating worker directories..." \
    && mkdir -p /etc/worker/{configs,logs} \
    && chmod 755 /etc/worker /etc/worker/configs /etc/worker/logs \
    && chown -R root:root /etc/worker \
    && echo "Testing worker binary..." \
    && /usr/local/bin/worker --version \
    && echo "Creating test configuration..." \
    && echo 'version: "1.0"\nkind: "worker"\n\nservices:\n  - name: test\n    command: "echo test"\n    autostart: true' > /etc/worker/test.yml \
    && echo "Test configuration contents:" \
    && cat /etc/worker/test.yml \
    && echo "Validating test configuration..." \
    && WORKER_DEBUG=true /usr/local/bin/worker validate /etc/worker/test.yml \
    && echo "Testing worker daemon..." \
    && WORKER_DEBUG=true /usr/local/bin/worker init \
    && WORKER_DEBUG=true /usr/local/bin/worker list

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssh-server \
    openssh-sftp-server \
    netcat-traditional \
    ca-certificates \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify worker installation and basic functionality
RUN echo "Testing worker configuration..." \
    && echo 'version: "1.0"\nservices:\n  - name: test\n    command: "echo test"\n    autostart: true' > /etc/worker/test.yml \
    && echo "Test configuration:" \
    && cat /etc/worker/test.yml \
    && echo "Validating test configuration..." \
    && /usr/local/bin/worker validate /etc/worker/test.yml \
    && echo "Testing service management..." \
    && /usr/local/bin/worker list \
    && /usr/local/bin/worker show test \
    && echo "Worker binary verification complete"

# Set up directories and permissions
WORKDIR /opt/sources/rabbitci/rabbit-ssh

# Create required directories with correct ownership
RUN mkdir -p \
    /home/udx/.kube \
    /root/.ssh \
    /etc/ssh \
    /home/udx/.cd/configs \
    /etc/worker \
    /var/log \
    /usr/local/lib/node_modules \
    /home/udx/.npm \
    /usr/local/bin \
    /home/udx/.worker && \
    ln -s /usr/bin/node /usr/local/bin/node && \
    chown -R udx:udx /home/udx && \
    chmod 755 /home/udx/.cd/configs && \
    chmod 755 /home/udx/.worker && \
    chmod 755 /etc/worker && \
    chown root:root /etc/worker

# Set up SSH configuration
COPY --chown=root:root static/etc/ssh/ /etc/ssh/
RUN chmod 755 /etc/ssh && \
    chmod 644 /etc/ssh/sshd_config && \
    mkdir -p /etc/ssh/authorized_keys.d /run/sshd && \
    chmod 755 /etc/ssh/authorized_keys.d && \
    chmod 755 /run/sshd && \
    chown -R root:root /etc/ssh && \
    chown -R udx:udx /home/udx && \
    chown -R udx:udx /opt/sources/rabbitci && \
    chown -R udx:udx /var/log && \
    chmod 777 /etc/ssh/authorized_keys.d
COPY --chown=udx:udx src/configs/worker.yml /home/udx/.cd/configs/worker.yml

# Fix SSH config and logging permissions
RUN chmod 644 /etc/ssh/sshd_config && \
    touch /var/log/sshd.log /var/log/auth.log /var/log/k8gate.log && \
    chmod 644 /var/log/*.log && \
    chown udx:udx /var/log/*.log && \
    chmod 755 /etc/ssh /etc/ssh/authorized_keys.d

# Install kubectl
RUN curl -L https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl \
    && chmod +x /usr/local/bin/kubectl

# Install Google Cloud SDK in /usr/local
RUN curl -sSL https://sdk.cloud.google.com | bash -s -- --install-dir=/usr/local --disable-prompts \
    && /usr/local/google-cloud-sdk/bin/gcloud components install gke-gcloud-auth-plugin \
    && chown -R udx:udx /usr/local/google-cloud-sdk
ENV PATH $PATH:/usr/local/google-cloud-sdk/bin

# Copy application files
COPY --chown=udx:udx . /opt/sources/rabbitci/rabbit-ssh/

# Copy and validate services configuration
COPY --chown=root:root .github/workflows/services.yml /etc/worker/services.yml
RUN set -ex \
    && echo "Setting up worker directories and log files..." \
    && mkdir -p /etc/worker/{configs,logs} /var/log/worker \
    && touch /var/log/{sshd,k8gate,ssh-keys-sync,auth}.log \
    && chown -R udx:udx /var/log/{worker,sshd.log,k8gate.log,ssh-keys-sync.log,auth.log} \
    && chmod 755 /etc/worker /etc/worker/configs /etc/worker/logs /var/log/worker \
    && chmod 644 /var/log/{sshd,k8gate,ssh-keys-sync,auth}.log \
    && echo "Verifying services configuration..." \
    && echo "Worker binary version: $(/usr/local/bin/worker --version)" \
    && echo "Configuration contents:" \
    && cat /etc/worker/services.yml \
    && echo "Validating services configuration..." \
    && WORKER_DEBUG=true DEBUG=worker:*,ssh:*,k8gate:* /usr/local/bin/worker validate /etc/worker/services.yml \
    && echo "Setting up service configuration..." \
    && cp /etc/worker/services.yml /etc/worker/configs/services.yml \
    && chmod 644 /etc/worker/services.yml /etc/worker/configs/services.yml \
    && chown root:root /etc/worker/services.yml /etc/worker/configs/services.yml \
    && echo "Testing worker initialization..." \
    && WORKER_DEBUG=true /usr/local/bin/worker init \
    && WORKER_DEBUG=true /usr/local/bin/worker list \
    && echo "Worker configuration validated successfully"

# Copy and verify service configuration
COPY --chown=root:root .github/workflows/services.yml /etc/worker/services.yml
RUN echo "Verifying worker configuration..." && \
    echo "Worker binary version and location:" && \
    which worker && worker --version && \
    echo "\nConfiguration location:" && \
    ls -la /etc/worker/services.yml && \
    echo "\nConfiguration contents:" && \
    cat /etc/worker/services.yml && \
    echo "\nWorker directory contents:" && \
    ls -la /etc/worker/ && \
    echo "\nValidating services configuration..." && \
    WORKER_DEBUG=true DEBUG=worker:*,ssh:*,k8gate:* /usr/local/bin/worker validate /etc/worker/services.yml && \
    echo "Worker configuration validated successfully" || {
        echo "\nERROR: Worker configuration validation failed"
        echo "\nWorker debug output:"
        WORKER_DEBUG=true /usr/local/bin/worker list --debug
        echo "\nConfiguration file contents:"
        cat /etc/worker/services.yml
        echo "\nService status:"
        WORKER_DEBUG=true /usr/local/bin/worker status --debug || true
        echo "\nEnvironment variables:"
        env | grep -E "WORKER_|SERVICE_|NODE_|DEBUG" || true
        echo "\nWorker binary permissions:"
        ls -l /usr/local/bin/worker
        echo "\nConfiguration file permissions:"
        ls -l /etc/worker/services.yml
        echo "\nTrying worker help:"
        /usr/local/bin/worker --help || true
        exit 1
    }

# Create config directory and copy services.yml there as well
RUN mkdir -p /etc/worker/configs && \
    cp /etc/worker/services.yml /etc/worker/configs/services.yml && \
    chown root:root /etc/worker/configs/services.yml && \
    chmod 644 /etc/worker/configs/services.yml

# Set up worker configuration directories with proper permissions
RUN mkdir -p /home/udx/.cd/configs && \
    chown -R udx:udx /home/udx/.cd && \
    chmod -R 755 /home/udx/.cd/configs && \
    chmod 644 /etc/worker/services.yml && \
    chmod 644 /etc/worker/configs/services.yml && \
    chown root:root /etc/worker/services.yml && \
    chown root:root /etc/worker/configs/services.yml

# Set up entrypoint scripts and permissions
COPY --chown=root:root bin/entrypoint.sh /usr/local/bin/
COPY --chown=root:root bin/controller.ssh.entrypoint.sh /usr/local/bin/
RUN chmod 755 /usr/local/bin/entrypoint.sh && \
    chmod 755 /usr/local/bin/controller.ssh.entrypoint.sh && \
    chmod +x /opt/sources/rabbitci/rabbit-ssh/bin/controller.keys.js && \
    chmod +x /opt/sources/rabbitci/rabbit-ssh/bin/server.js && \
    chmod -R 755 /opt/sources/rabbitci/rabbit-ssh/bin && \
    mkdir -p /usr/local/lib/node_modules && \
    chown -R udx:udx /home/udx/.npm && \
    chmod -R 775 /home/udx/.npm

# Add Google Cloud SDK to PATH
ENV PATH $PATH:/usr/local/google-cloud-sdk/bin

# Install dependencies with correct permissions
USER root
RUN mkdir -p /home/udx/.npm && \
    chown -R udx:udx /home/udx/.npm && \
    chmod -R 755 /home/udx && \
    npm config set cache /home/udx/.npm/_cacache && \
    cd /opt/sources/rabbitci/rabbit-ssh && \
    runuser -u udx -- npm install --omit=dev && \
    chown -R udx:udx /opt/sources/rabbitci/rabbit-ssh/node_modules

# Set environment variables for API server
ENV HOME=/home/udx \
    USER=udx \
    DEBUG=ssh*,sftp*,k8gate* \
    NODE_ENV=production \
    NODE_PORT=8080

# Volume for SSH keys and logs
VOLUME ["/etc/ssh/authorized_keys.d", "/var/log"]

# Expose ports
EXPOSE 22 8080

# Set entrypoint and default command
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/sbin/sshd", "-D", "-e"]
